*****************************************************************************
                               Reflection
Full Name  :  Sakshi Sakshi
Student ID#:  102602222

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************

In completing this workshop, I learnt a lot of new concepts in C++ programming. I was introduced to the move operations which is quite similar to copy but have their own advantages. Moreover, I learnt about the features of a new header file using the std::chrono library to measure the time spent on specific tasks which enabled me to capture timestamps and calculate time durations accurately. I didn’t face any major challenges while doing this workshop, however, researching about the chrono header file took a considerable amount of time. 
There is a significant amount of time difference between the copy and move operations in C++ because copying involves deep copying of the data which means the source object’s data is copied into a new object and this process can become really time consuming when complex objects occupying a lot of memory are involved. However, moving as its name suggests, involves the transfer of ownership of resources from the source to the destination object. In this, the destination object’s pointer starts pointing to the source object’s address in the memory and the source object pointer is set to nullptr. Therefore, it is a faster operation as compared to copying.
To read the input csv file, I began by opening the file using `std::ifstream`. If the file opening failed, I displayed an error message and exited. After opening the file, I read it twice. First, I counted the number of lines (entries) in the file to determine the required array size. Then, I dynamically allocated memory for an array of `Airport` objects called `m_airports`. Then, I read the file again to populate the `m_airports` array. I used an `std::istringstream` to parse each line, extract the data, and create `Airport` objects. These objects were stored in the `m_airports` array. This process allowed me to initialize the `AirportLog` object with data from the file. There must be some way to avoid rereading the file but, in this case, I couldn’t come up with a way so I have read the file twice to get my work done.
A steady_clock is like a very precise stopwatch. It's excellent for measuring short time intervals and is consistent, but it might not show the actual time of day. However, a system clock is just like our regular clock at home. It is not as precise as a steady clock and shows the actual clock time and date. Therefore, steady clock can be used when we need precise timing, and the system_clock when we want to know the current time of day.
